//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowApplication.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServiceChat", CallbackContract=typeof(WindowApplication.ServiceReference1.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        int Connect(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessageGlobal")]
        void SendMessageGlobal(ClassLibrary.Classes.Message Message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessageGlobal")]
        System.Threading.Tasks.Task SendMessageGlobalAsync(ClassLibrary.Classes.Message Message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/UpdateUsers")]
        void UpdateUsers();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/UpdateUsers")]
        System.Threading.Tasks.Task UpdateUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsernameById", ReplyAction="http://tempuri.org/IServiceChat/GetUsernameByIdResponse")]
        string GetUsernameById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsernameById", ReplyAction="http://tempuri.org/IServiceChat/GetUsernameByIdResponse")]
        System.Threading.Tasks.Task<string> GetUsernameByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsers", ReplyAction="http://tempuri.org/IServiceChat/GetUsersResponse")]
        ClassLibrary.Classes.UserSerialized[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUsers", ReplyAction="http://tempuri.org/IServiceChat/GetUsersResponse")]
        System.Threading.Tasks.Task<ClassLibrary.Classes.UserSerialized[]> GetUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessageGlobalCallback")]
        void SendMessageGlobalCallback(ClassLibrary.Classes.Message Message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/UpdateUsersCallback")]
        void UpdateUsersCallback(ClassLibrary.Classes.UserSerialized[] Users);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : WindowApplication.ServiceReference1.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<WindowApplication.ServiceReference1.IServiceChat>, WindowApplication.ServiceReference1.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string Username) {
            return base.Channel.Connect(Username);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string Username) {
            return base.Channel.ConnectAsync(Username);
        }
        
        public void Disconnect(int Id) {
            base.Channel.Disconnect(Id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int Id) {
            return base.Channel.DisconnectAsync(Id);
        }
        
        public void SendMessageGlobal(ClassLibrary.Classes.Message Message) {
            base.Channel.SendMessageGlobal(Message);
        }
        
        public System.Threading.Tasks.Task SendMessageGlobalAsync(ClassLibrary.Classes.Message Message) {
            return base.Channel.SendMessageGlobalAsync(Message);
        }
        
        public void UpdateUsers() {
            base.Channel.UpdateUsers();
        }
        
        public System.Threading.Tasks.Task UpdateUsersAsync() {
            return base.Channel.UpdateUsersAsync();
        }
        
        public string GetUsernameById(int Id) {
            return base.Channel.GetUsernameById(Id);
        }
        
        public System.Threading.Tasks.Task<string> GetUsernameByIdAsync(int Id) {
            return base.Channel.GetUsernameByIdAsync(Id);
        }
        
        public ClassLibrary.Classes.UserSerialized[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<ClassLibrary.Classes.UserSerialized[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
    }
}
